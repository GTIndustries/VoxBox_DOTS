namespace DynamicPixelCloud
{
    using UnityEngine;
    using System.Collections.Generic;

    /// <summary>
    /// The TerrainGenerator class.
    /// </summary>
    public class TerrainGenerator : MonoBehaviour
    {
        /// <summary>
        /// The terrain block prefab asset reference.
        /// </summary>
        public GameObject terrainBlockPrefab;

        /// <summary>
        /// The tree prefab asset reference.
        /// </summary>
        public GameObject treePrefab;

        /// <summary>
        /// The terrain map.
        /// </summary>
        private List<List<int>> terrainData = new List<List<int>>
        {
            new List<int>{ 0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,2,1,1,1,0,0,},
            new List<int>{ 0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,1,1,1,1,0,},
            new List<int>{ 0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,2,2,2,2,1,1,1,0,},
            new List<int>{ 0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,},
            new List<int>{ 0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,},
            new List<int>{ 0,1,1,1,1,1,1,1,2,2,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,},
            new List<int>{ 1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,0,0,},
            new List<int>{ 1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,0,0,},
            new List<int>{ 1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,},
            new List<int>{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,1,1,1,1,1,},
            new List<int>{ 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,},
            new List<int>{ 0,1,1,1,1,1,1,1,1,1,1,1,2,2,1,2,2,2,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,},
            new List<int>{ 0,0,1,1,1,1,1,1,1,1,2,2,2,2,1,2,2,2,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,},
            new List<int>{ 0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,0,0,1,1,1,1,1,1,2,2,2,1,1,1,0,},
            new List<int>{ 0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,2,2,2,1,1,0,0,},
            new List<int>{ 0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,2,1,1,0,0,0,},
            new List<int>{ 0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,},
            new List<int>{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,},
            new List<int>{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
            new List<int>{ 0,0,0,0,0,1,1,2,2,1,1,0,0,0,0,0,0,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,},
            new List<int>{ 0,0,0,0,1,1,1,2,2,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,},
            new List<int>{ 0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,},
            new List<int>{ 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,0,},
            new List<int>{ 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,},
            new List<int>{ 0,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,2,2,2,1,1,1,1,},
            new List<int>{ 1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,2,2,2,1,1,1,1,},
            new List<int>{ 1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,2,2,2,1,1,1,1,1,},
            new List<int>{ 1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
            new List<int>{ 0,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,},
            new List<int>{ 0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,},
            new List<int>{ 0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,},
            new List<int>{ 0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,},
            new List<int>{ 0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,},
            new List<int>{ 0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,},
        };
    
        /// <summary>
        /// Enters the Start stage.
        /// </summary>
        private void Start()
        {
            var parentTransform = this.transform;
            for (int i = 0; i < this.terrainData.Count; ++i)
            {
                for (int j = 0; j < this.terrainData[i].Count; ++j)
                {
                    if (terrainData[i][j] != 0)
                    {
                        var pos = new Vector3(i * 2, 0, j * 2);
                        var terrainBlock = Instantiate(this.terrainBlockPrefab, parentTransform) as GameObject;
                        terrainBlock.transform.localPosition = pos;
                        if (terrainData[i][j] == 2)
                        {
                            var tree = Instantiate(this.treePrefab, parentTransform) as GameObject;
                            tree.transform.localPosition = pos;
                        }
                    }
                }
            }
        }
    }
}
